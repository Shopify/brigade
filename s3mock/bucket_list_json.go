// GENERATED FILE: Do not edit, all changes will be lost.

// Package s3mock contains the content of files from BucketListJson. It
// is generated by:
//     https://github.com/aybabtme/gostatic
package s3mock

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"log"
)

// GetBucketListJson will lookup the static assets. It returns a *bytes.Reader
// and true if found, false otherwise. The static assets contain exactly the
// following entries:
//
//   bucket_list.json
//
func GetBucketListJson(filename string) (*bytes.Reader, bool) {
	data, ok := decompressedBucketListJson[filename]
	return bytes.NewReader(data), ok
}

// ListBucketListJson will return all the static assets sharing root
// BucketListJson.
func ListBucketListJson() map[string]*bytes.Reader {
	out := make(map[string]*bytes.Reader, len(decompressedBucketListJson))
	for k, v := range decompressedBucketListJson {
		out[k] = bytes.NewReader(v)
	}
	return out
}

var decompressedBucketListJson = make(map[string][]byte)

func init() {

	var compressed = [...]struct {
		name   string
		gzip64 string
	}{
		{"bucket_list.json", ``},
	}

	for _, file := range compressed {
		gzipdata, err := base64.StdEncoding.DecodeString(file.gzip64)
		if err != nil {
			log.Panicf("Couldn't decode base64 data for %q: %v", file.name, err)
		}
		gr, err := gzip.NewReader(bytes.NewBuffer(gzipdata))
		if err != nil {
			log.Panicf("Couldn't open gzip stream for data for %q: %v", file.name, err)
		}
		data, err := ioutil.ReadAll(gr)
		if err != nil {
			log.Panicf("Couldn't decompress gzip data in %q: %v", file.name, err)
		}
		decompressedBucketListJson[file.name] = data
	}
}
